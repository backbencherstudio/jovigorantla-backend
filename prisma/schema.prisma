generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearchPostgres", "postgresqlExtensions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  extensions = [postgis]
}

model Account {
  id                  String    @id @default(cuid())
  user_id             String
  type                String?
  provider            String?
  provider_account_id String?
  refresh_token       String?
  access_token        String?
  expires_at          DateTime?
  token_type          String?
  scope               String?
  id_token            String?
  session_state       String?
  user                User      @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@unique([provider, provider_account_id])
  @@map("accounts")
}

model User {
  id                        String               @id @default(cuid())
  created_at                DateTime             @default(now())
  updated_at                DateTime             @default(now())
  deleted_at                DateTime?
  status                    Int?                 @default(1) @db.SmallInt
  approved_at               DateTime?
  availability              String?
  email                     String?              @unique
  username                  String?              @unique
  name                      String?              @db.VarChar(255)
  first_name                String?              @db.VarChar(255)
  last_name                 String?              @db.VarChar(255)
  password                  String?              @db.VarChar(255)
  domain                    String?              @unique
  avatar                    String?
  phone_number              String?
  country                   String?
  state                     String?
  city                      String?
  address                   String?
  zip_code                  String?
  gender                    String?
  date_of_birth             DateTime?            @db.Date
  billing_id                String?
  type                      String?              @default("user")
  email_verified_at         DateTime?
  is_two_factor_enabled     Int?                 @default(0)
  two_factor_secret         String?
  accounts                  Account[]
  creator_conversations     Conversation[]       @relation("creator")
  participant_conversations Conversation[]       @relation("participant")
  favorites                 Favorite[]
  listing                   Listing[]
  receiver_messages         Message[]            @relation("receiver")
  sender_messages           Message[]            @relation("sender")
  receiver_notifications    Notification[]       @relation("receiver")
  sender_notifications      Notification[]       @relation("sender")
  payment_transactions      PaymentTransaction[]
  role_users                RoleUser[]
  roles                     Role[]
  ucodes                    Ucode[]
  user_payment_methods      UserPaymentMethod[]
  user_settings             UserSetting[]
  reports Report[]

  @@map("users")
}

model Ucode {
  id         String    @id @default(cuid())
  created_at DateTime  @default(now())
  updated_at DateTime  @default(now())
  status     Int?      @default(1) @db.SmallInt
  user_id    String?
  token      String?
  email      String?
  expired_at DateTime?
  user       User?     @relation(fields: [user_id], references: [id])

  @@map("ucodes")
}

model Role {
  id               String           @id @default(cuid())
  created_at       DateTime         @default(now())
  updated_at       DateTime         @default(now())
  deleted_at       DateTime?
  status           Int?             @default(1) @db.SmallInt
  title            String?
  name             String?
  user_id          String?
  permission_roles PermissionRole[]
  role_users       RoleUser[]
  user             User?            @relation(fields: [user_id], references: [id], onDelete: Cascade)
  permissions      Permission[]     @relation("PermissionToRole")

  @@map("roles")
}

model Permission {
  id               String           @id @default(cuid())
  created_at       DateTime         @default(now())
  updated_at       DateTime         @default(now())
  deleted_at       DateTime?
  status           Int?             @default(1) @db.SmallInt
  title            String?
  action           String?
  subject          String?
  conditions       String?
  fields           String?
  permission_roles PermissionRole[]
  roles            Role[]           @relation("PermissionToRole")

  @@map("permissions")
}

model PermissionRole {
  created_at    DateTime   @default(now())
  updated_at    DateTime   @default(now())
  permission_id String
  role_id       String
  permission    Permission @relation(fields: [permission_id], references: [id], onDelete: Cascade)
  role          Role       @relation(fields: [role_id], references: [id], onDelete: Cascade)

  @@id([permission_id, role_id])
  @@map("permission_roles")
}

model RoleUser {
  created_at DateTime @default(now())
  updated_at DateTime @default(now())
  role_id    String
  user_id    String
  role       Role     @relation(fields: [role_id], references: [id], onDelete: Cascade)
  user       User     @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@id([role_id, user_id])
  @@map("role_users")
}

model NotificationEvent {
  id            String         @id @default(cuid())
  created_at    DateTime       @default(now())
  updated_at    DateTime       @default(now())
  deleted_at    DateTime?
  status        Int?           @default(1) @db.SmallInt
  type          String?
  text          String?
  notifications Notification[]

  @@map("notification_events")
}

model Notification {
  id                    String             @id @default(cuid())
  created_at            DateTime           @default(now())
  updated_at            DateTime           @default(now())
  deleted_at            DateTime?
  status                Int?               @default(1) @db.SmallInt
  sender_id             String?
  receiver_id           String?
  notification_event_id String?
  entity_id             String?
  read_at               DateTime?
  notification_event    NotificationEvent? @relation(fields: [notification_event_id], references: [id])
  receiver              User?              @relation("receiver", fields: [receiver_id], references: [id])
  sender                User?              @relation("sender", fields: [sender_id], references: [id])

  @@map("notifications")
}

model UserPaymentMethod {
  id                String    @id @default(cuid())
  created_at        DateTime  @default(now())
  updated_at        DateTime  @default(now())
  deleted_at        DateTime?
  user_id           String?
  payment_method_id String?
  checkout_id       String?
  user              User?     @relation(fields: [user_id], references: [id])

  @@map("user_payment_methods")
}

model PaymentTransaction {
  id               String    @id @default(cuid())
  created_at       DateTime  @default(now())
  updated_at       DateTime  @default(now())
  deleted_at       DateTime?
  store_id         String?
  user_id          String?
  order_id         String?
  type             String?   @default("order")
  withdraw_via     String?   @default("wallet")
  provider         String?
  reference_number String?
  status           String?   @default("pending")
  raw_status       String?
  amount           Decimal?
  currency         String?
  paid_amount      Decimal?
  paid_currency    String?
  user             User?     @relation(fields: [user_id], references: [id])

  @@map("payment_transactions")
}

model Message {
  id              String         @id @default(cuid())
  created_at      DateTime       @default(now())
  updated_at      DateTime       @default(now())
  deleted_at      DateTime?
  status          MessageStatus? @default(PENDING)
  sender_id       String?
  receiver_id     String?
  conversation_id String?
  attachment_id   String?
  message         String?
  is_read         Boolean?       @default(false)
  attachment      Attachment?    @relation(fields: [attachment_id], references: [id])
  conversation    Conversation?  @relation(fields: [conversation_id], references: [id], onDelete: Cascade)
  receiver        User?          @relation("receiver", fields: [receiver_id], references: [id])
  sender          User?          @relation("sender", fields: [sender_id], references: [id])

  @@map("messages")
}

model Attachment {
  id         String    @id @default(cuid())
  created_at DateTime  @default(now())
  updated_at DateTime  @default(now())
  deleted_at DateTime?
  name       String?
  type       String?
  size       Int?
  file       String?
  file_alt   String?
  messages   Message[]

  @@map("attachments")
}

model Conversation {
  id             String    @id @default(cuid())
  created_at     DateTime  @default(now())
  updated_at     DateTime  @default(now())
  deleted_at     DateTime?
  creator_id     String?
  participant_id String?
  listing_id     String?

  deleted_by_creator     DateTime?
  deleted_by_participant DateTime?
  blocked_by_creator     Boolean   @default(false)
  blocked_by_participant Boolean   @default(false)


  creator        User?     @relation("creator", fields: [creator_id], references: [id])
  participant    User?     @relation("participant", fields: [participant_id], references: [id])
  listing        Listing?  @relation(fields: [listing_id], references: [id], onDelete: SetNull)
  messages       Message[]

  @@map("conversations")
}

model Faq {
  id         String    @id @default(cuid())
  created_at DateTime  @default(now())
  updated_at DateTime  @default(now())
  deleted_at DateTime?
  status     Int?      @default(1) @db.SmallInt
  sort_order Int?      @default(0)
  question   String?
  answer     String?

  @@map("faqs")
}

model Contact {
  id           String    @id @default(cuid())
  created_at   DateTime  @default(now())
  updated_at   DateTime  @default(now())
  deleted_at   DateTime?
  first_name   String?
  last_name    String?
  email        String?
  phone_number String?
  message      String?

  @@map("contacts")
}

model SocialMedia {
  id         String    @id @default(cuid())
  created_at DateTime  @default(now())
  updated_at DateTime  @default(now())
  deleted_at DateTime?
  status     Int?      @default(1) @db.SmallInt
  sort_order Int?      @default(0)
  name       String?
  url        String?
  icon       String?

  @@map("social_medias")
}

model WebsiteInfo {
  id                  String    @id @default(cuid())
  created_at          DateTime  @default(now())
  updated_at          DateTime  @default(now())
  deleted_at          DateTime?
  name                String?
  phone_number        String?
  email               String?
  address             String?
  logo                String?
  favicon             String?
  copyright           String?
  cancellation_policy String?

  @@map("website_infos")
}

model Setting {
  id            String        @id @default(cuid())
  created_at    DateTime      @default(now())
  updated_at    DateTime      @default(now())
  deleted_at    DateTime?
  category      String?
  label         String?
  description   String?
  key           String?       @unique
  default_value String?
  user_settings UserSetting[]

  @@map("settings")
}

model UserSetting {
  id         String    @id @default(cuid())
  created_at DateTime  @default(now())
  updated_at DateTime  @default(now())
  deleted_at DateTime?
  user_id    String?
  setting_id String?
  value      String?
  setting    Setting?  @relation(fields: [setting_id], references: [id])
  user       User?     @relation(fields: [user_id], references: [id])

  @@map("user_settings")
}

model VerificationCode {
  id         String   @id @default(cuid())
  email      String
  code       String
  expiresAt  DateTime
  created_at DateTime @default(now())
  updated_at DateTime @default(now())
}

model Listing {
  id                     String                   @id @default(cuid())
  category               String
  sub_category           String
  title                  String?
  description            String?
  image                  String?
  slug                   String?                  @unique
 
  post_to_usa            Boolean                  @default(false)
  status ListingStatus                            @default(APPROVED)
  usa_listing_status     ListingStatus?            @default(PENDING)




  created_at             DateTime                 @default(now()) 
  updated_at             DateTime                 @updatedAt

  address                String?
  latitude               Float                    @default(0)
  longitude              Float                    @default(0)
  
  radius                 Float                    @default(0)
  favorites              Favorite[]
  user_id                String
  user                   User                     @relation(fields: [user_id], references: [id])
  Conversation           Conversation[]
  reports                Report[]
  cities                 City[]               @relation("ListingCities")

  @@index([post_to_usa])
  @@index([status])
  @@index([usa_listing_status])
  @@map("listings")
}

enum ReportStatus {
  PENDING
  APPROVED     // Report is valid, and approved for action
  BLOCKED      // Reported listing has been blocked
  DELETED      // Reported listing has been deleted
}

enum ReportType {
  NORMAL
  POST_TO_USA
}

model Report {
  id          String        @id @default(cuid())
  reason      String?
  message     String?       // Optional user input
  status      ReportStatus  @default(PENDING)
  
  report_type ReportType    @default(NORMAL)
  user_id     String?
  listing_id  String?
  created_at  DateTime      @default(now())
  updated_at  DateTime      @updatedAt

  user        User?          @relation(fields: [user_id], references: [id], onDelete: SetNull)
  listing     Listing?       @relation(fields: [listing_id], references: [id], onDelete: SetNull)

  @@index([status])
  @@index([listing_id])
  @@map("reports")
}


model AdGroup {
  id            String            @id @default(cuid())
  name          String
  frequency     Int
  start_date    DateTime?
  end_date      DateTime?
  display_pages DisplayPageType[]
  active        Boolean?          @default(true)
  created_at    DateTime          @default(now())
  updated_at    DateTime          @updatedAt
  ads           Ad[]

  @@map("ad_groups")
}

model Ad {
  id          String   @id @default(cuid())
  name        String
  target_url  String
  image       String
  active      Boolean? @default(true)
  ad_group_id String
  views       Int?     @default(0)
  clicks      Int?     @default(0)
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt
  ad_group    AdGroup  @relation(fields: [ad_group_id], references: [id], onDelete: Cascade)
  adCities    AdCity[]  

  @@map("ads")
}

model City {
  id         String     @id @default(cuid())
  address       String     
  latitude   Float
  longitude  Float
  location   Unsupported("geometry")?
  // boundary   Unsupported("geometry")?   // ✅ NEW: for polygon boundary
  created_at DateTime   @default(now())
  updated_at DateTime   @updatedAt

  adCities   AdCity[]
  listings    Listing[]   @relation("ListingCities")

  @@map("cities")
}


model AdCity {
  ad_id   String
  city_id String

  ad      Ad    @relation(fields: [ad_id], references: [id], onDelete: Cascade)
  city    City  @relation(fields: [city_id], references: [id], onDelete: Cascade)

  @@id([ad_id, city_id])
  @@map("ad_cities")
}


model SideBarAd {
  id         String        @id @default(cuid())
  name       String?
  target_url String
  image      String
  clicks     Int?          @default(0)
  views      Int?          @default(0)
  add_type   SidebarAdType
  active     Boolean?      @default(true)
  created_at DateTime      @default(now())
  updated_at DateTime      @updatedAt

  @@map("sidebar_ads")
}

model Favorite {
  id         String   @id @default(cuid())
  user_id    String
  listing_id String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  listing    Listing  @relation(fields: [listing_id], references: [id])
  user       User     @relation(fields: [user_id], references: [id])

  @@unique([user_id, listing_id])
  @@map("favorites")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model spatial_ref_sys {
  srid      Int     @id
  auth_name String? @db.VarChar(256)
  auth_srid Int?
  srtext    String? @db.VarChar(2048)
  proj4text String? @db.VarChar(2048)
}

enum MessageStatus {
  PENDING
  SENT
  DELIVERED
  READ
}

enum DisplayPageType {
  HOME
  RIDES
  JOBS
  MARKETPLACE
  ACCOMMODATIONS
}

enum ListingStatus {
  PENDING
  APPROVED
  BLOCKED
  DELETED
}

enum SidebarAdType {
  TOP
  BOTTOM
}


model Page {
  id        String   @id @default(cuid())
  slug      String   @unique       // e.g., 'about-us', 'privacy-policy'
  title     String
  content   String    @db.Text
  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt

  @@map("pages")
}

